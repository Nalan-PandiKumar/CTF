#!/usr/bin/env python3
# win_checksec.py
import sys
import pefile

DLL_CHARACTERISTICS = {
    0x0040: "IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE (ASLR)",
    0x0100: "IMAGE_DLLCHARACTERISTICS_NX_COMPAT (DEP/NX)",
    0x0020: "IMAGE_DLLCHARACTERISTICS_HIGH_ENTROPY_VA (High entropy ASLR)",
    0x4000: "IMAGE_DLLCHARACTERISTICS_GUARD_CF (Control Flow Guard)",
    0x0080: "IMAGE_DLLCHARACTERISTICS_NO_ISOLATION",
    0x0200: "IMAGE_DLLCHARACTERISTICS_NO_SEH",
}

def check_pe(path):
    pe = pefile.PE(path)
    print(f"File: {path}")
    # DLL characteristics
    dll_char = pe.OPTIONAL_HEADER.DllCharacteristics
    print(f"DLL Characteristics: 0x{dll_char:04x}")
    for flag, name in DLL_CHARACTERISTICS.items():
        print(f"  {'YES' if dll_char & flag else 'NO '} - {name}")

    # Check load config (for GS/security cookie, SafeSEH table)
    try:
        lconf = pe.OPTIONAL_HEADER.DATA_DIRECTORY[pefile.DIRECTORY_ENTRY['IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG']]
        if lconf.VirtualAddress != 0:
            print("\nLoad Config: present")
            # try to parse structure
            if hasattr(pe, "DIRECTORY_ENTRY_LOAD_CONFIG"):
                lc = pe.DIRECTORY_ENTRY_LOAD_CONFIG.struct
                # Security cookie if present
                cookie = getattr(lc, "SecurityCookie", 0)
                seh_table = getattr(lc, "SEHandlerTable", 0) or getattr(lc, "SafeSEHTable", 0)
                print(f"  SecurityCookie: {hex(cookie) if cookie else 'NOT PRESENT'}")
                print(f"  SafeSEH table: {hex(seh_table) if seh_table else 'NOT PRESENT / Not applicable (x64)'}")
            else:
                print("  (couldn't parse detailed load config â€” use a full PE parser)")
        else:
            print("\nLoad Config: NOT present")
    except Exception as e:
        print("\nLoad Config: error reading:", e)

    # Certificate table (Authenticode)
    cert_dir = pe.OPTIONAL_HEADER.DATA_DIRECTORY[pefile.DIRECTORY_ENTRY['IMAGE_DIRECTORY_ENTRY_SECURITY']]
    if cert_dir.Size and cert_dir.VirtualAddress:
        print("\nCertificate table: PRESENT (file may be signed)")
    else:
        print("\nCertificate table: NOT present")

    # Quick heuristic for /GS presence: look for __security_cookie symbol in exports/imports/strings
    s = b"__security_cookie"
    raw = pe.__data__
    print("\nHeuristic: __security_cookie string in file:", "YES" if raw.find(s) != -1 else "NO")
    print("\nDone.")

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python win_checksec.py <file.exe>")
        sys.exit(1)
    check_pe(sys.argv[1])
