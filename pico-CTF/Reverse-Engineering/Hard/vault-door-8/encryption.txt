### (Valut Door 8) Encryption Logic


	# Core Logic :- Swapping the two bit positions in the byte.

	```java
		public char switchBits(char c, int p1, int p2){
                /*
                 Move the bit in position p1 to position p2, and move the bit
                 that was in position p2 to position p1. Precondition: p1 < p2
                */
                char mask1 = (char)(1 << p1);
                char mask2 = (char)(1 << p2);
                /* char mask3 = (char)(1<<p1<<p2); mask1++; mask1--; */
                char bit1 = (char)(c & mask1);
                char bit2 = (char)(c & mask2);
                /*
                 System.out.println("bit1 " + Integer.toBinaryString(bit1));
                 System.out.println("bit2 " + Integer.toBinaryString(bit2));
                */
                char rest = (char)(c & ~(mask1 | mask2));
                char shift = (char)(p2 - p1);
                char result = (char)((bit1<<shift) | (bit2>>shift) | rest);
                return result;
		}
	```


	For Example:-
			Let's consider letter 'A' ascii value of 65 is how encrypted by this function using p1 -> 1 , p2 -> 2 swapping position-1 and position-2.
			
			c = 65 // 'A'
			p1 -> 1
			p2 -> 2

			65 -> 0110 0101

			The Mask-1 & Mask-2 are computed to retrieve the value of the bits (set/clear) in position-1 & position-2

			# Status of the Bits at position-1 & position-2
				1. The Bit-1 holds the result whether the position-1 is (set/clear) in c (65) or 'A'.
				2. The Bit-2 holds the result whether the position-2 is (set/clear) in c (65) or 'A'

			Mask-1 = 1 << p1 -> 1 << 1 or 1 * 2^1 -> 2
			Mask-2 = 1 << p2 -> 1 << 2 or 1 * 2^2 -> 4

			# Bits status using Mask-1 & Mask-2
				1. Bit-1 = 0110 0101 & 0000 0010 -> 0000 0000  // (Bit at position-1 is cleared)
				2  Bit-2 = 0110 0101 & 0000 0100 -> 0000 0100  // (Bit at position-2 is Set)

			# Rest Computation

				The rest is computed to get the status of other bits except the bits at position-1 & position-2.


				# Mask-1 & Mask-2 are orED and notED to clear the bits at position-1 & position-2
					1. (Mask-1 | Mask-2) -> (0000 0010 | 0000 0100) -> 0000 0110 (6)
					2. ~(Mask-1 | Mask-2) -> ~(6) ->  1111 1001 (-7)
					3. c & ~(Mask-1 | Mask-2) -> 0110 0101 & 1111 1001 -> 0110 0001

			# Shift
				It is the difference between position-1 & position-2 and it is computed for shifting the p2 to p1 and p1 to p2

			# Result
				result = ( Bit1 << shift ) | (Bit2 >> shift) | rest

				1. Bit 1 has status(set/clear) of position-1 bit 
				2. Bit 2 has status(set/clear) of position-2 bit

				By left shifting the Bit1 by difference between(p2 & p1), position-2 has status(set/clear) of position-1
				By right shifting the Bit2 by difference between(p2 & p1), position-1 has status(set/clear) of position-2

				Finally the rest is orED together to get the status of other bits.

				result = ( 0 << 1 ) | ( 4 >> 2 ) | 0110 0001 -> 0110 0011

				65 -> 0110 0101 -> 0110 0011 ( Bits at position-2 & position-1 are swapped).
